# -*- coding: utf-8 -*-
"""Fake_Account_Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/140E9cadL9cATXxjQIIKlUhKtKMb_FHQQ
"""

from google.colab import drive
drive.mount('/content/drive')
file_path = '/content/drive/My Drive/Fake_account_ML_Model/train.csv'

"""## Load and Inspect the Dataset"""

import pandas as pd

# Load the dataset
df = pd.read_csv(file_path)

# Inspect the first few rows and check for missing values
print(df.head())
print(df.info())

"""## Preprocess Data"""

# Convert boolean columns to boolean type
df['profile pic'] = df['profile pic'].astype(bool)
df['name==username'] = df['name==username'].astype(bool)
df['external URL'] = df['external URL'].astype(bool)
df['private'] = df['private'].astype(bool)

# Convert numerical columns to appropriate types
df['nums/length username'] = df['nums/length username'].astype(float)
df['fullname words'] = df['fullname words'].astype(int)
df['nums/length fullname'] = df['nums/length fullname'].astype(float)
df['description length'] = df['description length'].astype(int)
df['#posts'] = df['#posts'].astype(int)
df['#followers'] = df['#followers'].astype(int)

# Handle missing values if necessary
df = df.fillna({'profile pic': False, 'name==username': False, 'external URL': False, 'private': False})

"""## Identify Potential Fake Followers"""

# Define thresholds and criteria for identifying potential fake followers
high_numerical_ratio_username = 0.2
high_numerical_ratio_fullname = 0.1
short_fullname_threshold = 1
short_bio_threshold = 50
low_posts_threshold = 20
low_followers_threshold = 500

# Flag potential fake followers
df['Potential Fake'] = (
    (df['profile pic'] == False) &
    ((df['nums/length username'] > high_numerical_ratio_username) |
    (df['fullname words'] <= short_fullname_threshold) |
    (df['nums/length fullname'] > high_numerical_ratio_fullname) |
    (df['name==username'] == True) |
    (df['description length'] < short_bio_threshold) |
    (df['external URL'] == False) |
    (df['private'] == True) ) &
    ((df['#posts'] < low_posts_threshold) & (df['#followers'] < low_followers_threshold))
)

"""#3  Generate a Report"""

# Output the list of potential fake followers
potential_fake_followers = df[df['Potential Fake']]
potential_fake_followers.to_csv('potential_fake_followers.csv', index=False)

# Generate a summary report
with open('report.txt', 'w') as report_file:
    report_file.write(f"Criteria for Potential Fake Followers:\n")
    report_file.write(f"1. No Profile Picture\n")
    report_file.write(f"2. High Ratio of Numerical Characters in Username (> {high_numerical_ratio_username})\n")
    report_file.write(f"3. Short Full Name (<= {short_fullname_threshold} words)\n")
    report_file.write(f"4. High Ratio of Numerical Characters in Full Name (> {high_numerical_ratio_fullname})\n")
    report_file.write(f"5. Username Equals Full Name\n")
    report_file.write(f"6. Short Bio (<= {short_bio_threshold} characters)\n")
    report_file.write(f"7. No External URL\n")
    report_file.write(f"8. Private Profile\n")
    report_file.write(f"9. Low Number of Posts (< {low_posts_threshold}) and Low Number of Followers (< {low_followers_threshold})\n")
    report_file.write(f"\nNumber of Potential Fake Followers Identified: {len(potential_fake_followers)}\n")
    report_file.write("\nDetails of Potential Fake Followers:\n")
    report_file.write(potential_fake_followers.to_string())

"""## Prepare a Test Dataset"""

# Load the test dataset
file_path_2 = '/content/drive/My Drive/Fake_account_ML_Model/test.csv'
test_df = pd.read_csv(file_path_2)

# Inspect the test data
print(test_df.head())
print(test_df.info())

"""## Apply the Model to the Test Dataset"""

# Process the test data using the same function
def process_data(df):
    # Convert columns to appropriate data types
    df['profile pic'] = df['profile pic'].astype(bool)
    df['name==username'] = df['name==username'].astype(bool)
    df['external URL'] = df['external URL'].astype(bool)
    df['private'] = df['private'].astype(bool)
    df['nums/length username'] = df['nums/length username'].astype(float)
    df['fullname words'] = df['fullname words'].astype(int)
    df['nums/length fullname'] = df['nums/length fullname'].astype(float)
    df['description length'] = df['description length'].astype(int)
    df['#posts'] = df['#posts'].astype(int)
    df['#followers'] = df['#followers'].astype(int)

    df = df.fillna({'profile pic': False, 'name==username': False, 'external URL': False, 'private': False})

    # Define thresholds and criteria for fake followers
    high_numerical_ratio_username = 0.2
    high_numerical_ratio_fullname = 0.1
    short_fullname_threshold = 1
    short_bio_threshold = 50
    low_posts_threshold = 20
    low_followers_threshold = 500

    df['Potential Fake'] = (
    (df['profile pic'] == False) &
    ((df['nums/length username'] > high_numerical_ratio_username) |
    (df['fullname words'] <= short_fullname_threshold) |
    (df['nums/length fullname'] > high_numerical_ratio_fullname) |
    (df['name==username'] == True) |
    (df['description length'] < short_bio_threshold) |
    (df['external URL'] == False) |
    (df['private'] == True) ) &
    ((df['#posts'] < low_posts_threshold) & (df['#followers'] < low_followers_threshold))
    )

    return df

# Process the test dataset
processed_test_df = process_data(test_df)

# Assuming the test dataset has a column 'Actual Label' with true labels
# and 'Potential Fake' column from the processed data
from sklearn.metrics import accuracy_score, classification_report

# Replace 'Actual Label' with the column name that contains true labels
y_true = test_df['fake']
y_pred = processed_test_df['Potential Fake']

# Calculate accuracy
accuracy = accuracy_score(y_true, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Print classification report
report = classification_report(y_true, y_pred)
print(report)

